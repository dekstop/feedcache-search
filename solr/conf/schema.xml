<?xml version="1.0" encoding="UTF-8" ?>

<schema name="feedcache" version="1.1">

  <types>
    <!-- The StrField type is not analyzed, but indexed/stored verbatim.  
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters).
    -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <fieldType name="string_lower" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <!-- KeywordTokenizer does no actual tokenizing, so the entire 
          input string is preserved as a single token
        -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries, since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>

    <!-- Numeric field types that manipulate the value into
         a string value that isn't human-readable in its internal form,
         but with a lexicographic ordering the same as the numeric ordering,
         so that range queries work correctly. -->
    <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.
      -->
    <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

    <!-- Strips HTML tags. Splits on non-word characters (and case changes). Lowercase. -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.HTMLStripStandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.HTMLStripStandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>  
    
    <!-- TODO: need to figure out how to tokenise URLs. Atm it matches string_lower -->
    <fieldType name="url" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
          <tokenizer class="solr.KeywordTokenizerFactory"/>
          <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
          <tokenizer class="solr.KeywordTokenizerFactory"/>
          <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
      </fieldType>

  </types>


  <fields>
    <!-- 
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
     termVectors: [false] set to true to store the term vector for a given field.
       When using MoreLikeThis, fields used for similarity should be stored for 
       best performance.
    -->

    <field name="id" type="integer" indexed="true" stored="true" required="true" />
    
    <field name="feed_id" type="integer" indexed="true" stored="true" required="true" />
    <field name="feed_id_facet" type="integer" indexed="true" stored="true" required="true" />
    <field name="feed_title" type="text" indexed="true" stored="false" required="true"/>
    <field name="feed_description" type="text" indexed="true" stored="false" required="false"/>
    <field name="feed_link" type="url" indexed="true" stored="false" required="false"/>
    
    <field name="date" type="date" indexed="true" stored="true" required="true"/>
    <field name="date_added" type="date" indexed="true" stored="true" required="true"/>
    <field name="date_published" type="date" indexed="true" stored="true" required="false"/>
    
    <field name="title" type="text" indexed="true" stored="false" required="true"/>
    <field name="content" type="text" indexed="true" stored="false" required="false"/>
    <field name="summary" type="text" indexed="true" stored="false" required="false"/>
    <field name="link" type="url" indexed="true" stored="false" required="false"/>
    
    <field name="author" type="text" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="author_facet" type="string_lower" indexed="true" stored="false" required="false" multiValued="true"/>
    
    <field name="category" type="text" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="category_facet" type="string_lower" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="category_scheme" type="string_lower" indexed="true" stored="false" required="false" multiValued="true"/>
    
    <field name="enclosure_url" type="url" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="enclosure_mimetype" type="string_lower" indexed="true" stored="true" required="false" multiValued="true"/>
    
    <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
    <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
    <field name="all" type="text" indexed="true" stored="false" multiValued="true"/>

    <!-- Here, default is used to create a "timestamp" field indicating
        When each document was indexed.
    -->
    <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
   
  </fields>

  <uniqueKey>id</uniqueKey>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>text</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>

  <copyField source="title" dest="text"/>
  <copyField source="content" dest="text"/>
  <copyField source="summary" dest="text"/>
  <copyField source="category" dest="text"/>

  <copyField source="feed_title" dest="all"/>
  <copyField source="feed_description" dest="all"/>
  <copyField source="feed_link" dest="all"/>
  <copyField source="title" dest="all"/>
  <copyField source="content" dest="all"/>
  <copyField source="summary" dest="all"/>
  <copyField source="category" dest="all"/>
  <copyField source="link" dest="all"/>
  <copyField source="author" dest="all"/>
  <copyField source="category" dest="all"/>
  <copyField source="category_scheme" dest="all"/>
  <copyField source="enclosure_url" dest="all"/>
  <copyField source="enclosure_mimetype" dest="all"/>

  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom similarity may be specified here, but the default is fine
       for most applications.  -->
  <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
  <!-- ... OR ...
       Specify a SimilarityFactory class name implementation
       allowing parameters to be used.
  -->
  <!--
  <similarity class="com.example.solr.CustomSimilarityFactory">
    <str name="paramkey">param value</str>
  </similarity>
  -->

</schema>
